// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Upload {
  id                String   @id @default(uuid())
  filename          String
  originalFilename  String
  fileSize          Int
  uploadedBy        String   @default("admin")
  uploadedAt        DateTime @default(now())
  status            String   @default("pending") // pending, validating, valid, invalid, processing, completed, failed
  validationErrors  String?  // JSON string
  validationWarnings String? // JSON string
  rowsTotal         Int      @default(0)
  rowsProcessed     Int      @default(0)
  rowsFailed        Int      @default(0)
  brandConfig       String?
  scraperType       String?  // json, html, manual_upload

  validationLogs    ValidationLog[]
  locations         Location[]
  scraperJobs       ScraperJob[]

  @@index([status])
  @@index([uploadedAt])
}

model ValidationLog {
  id          String   @id @default(uuid())
  uploadId    String
  rowNumber   Int?
  logType     String   // error, warning, info
  fieldName   String?
  issueType   String
  message     String
  value       String?
  createdAt   DateTime @default(now())

  upload      Upload   @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@index([uploadId])
  @@index([logType])
}

model Location {
  id                      String   @id @default(uuid())
  uploadId                String?
  handle                  String   @unique
  name                    String
  status                  Boolean  @default(true)
  addressLine1            String
  addressLine2            String?
  postalCode              String?
  city                    String
  stateProvinceRegion     String?
  country                 String
  phone                   String?
  email                   String?
  website                 String?
  imageUrl                String?

  // Hours
  monday                  String?
  tuesday                 String?
  wednesday               String?
  thursday                String?
  friday                  String?
  saturday                String?
  sunday                  String?

  // Coordinates (required)
  latitude                Float
  longitude               Float

  // SEO
  pageTitle               String?
  pageDescription         String?
  metaTitle               String?
  metaDescription         String?

  // Other
  priority                Int?
  tags                    String?
  customBrands            String?

  // Localization (French)
  nameFr                  String?
  pageTitleFr             String?
  pageDescriptionFr       String?
  customBrandsFr          String?

  // Localization (Chinese)
  nameZhCn                String?
  pageTitleZhCn           String?
  pageDescriptionZhCn     String?
  customBrandsZhCn        String?

  // Localization (Spanish)
  nameEs                  String?
  pageTitleEs             String?
  pageDescriptionEs       String?
  customBrandsEs          String?

  // Custom Buttons
  customButton1Title      String?
  customButton1Url        String?
  customButton2Title      String?
  customButton2Url        String?

  // Custom Buttons - Localized
  customButton1TitleFr    String?
  customButton1UrlFr      String?
  customButton1TitleZhCn  String?
  customButton1UrlZhCn    String?
  customButton1TitleEs    String?
  customButton1UrlEs      String?

  customButton2TitleFr    String?
  customButton2UrlFr      String?
  customButton2TitleZhCn  String?
  customButton2UrlZhCn    String?
  customButton2TitleEs    String?
  customButton2UrlEs      String?

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  upload                  Upload?  @relation(fields: [uploadId], references: [id], onDelete: SetNull)

  @@index([uploadId])
  @@index([city])
  @@index([country])
}

model ScraperJob {
  id              String   @id @default(uuid())
  brandName       String
  config          String   // JSON string
  status          String   @default("queued") // queued, running, completed, failed
  startedAt       DateTime @default(now())
  completedAt     DateTime?
  uploadId        String?
  errorMessage    String?
  recordsScraped  Int      @default(0)

  upload          Upload?  @relation(fields: [uploadId], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([brandName])
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  email       String   @unique
  passwordHash String
  role        String   @default("admin") // admin, viewer
  createdAt   DateTime @default(now())
  lastLogin   DateTime?

  @@index([username])
  @@index([email])
}
